package ch.cyberduck.ui.cocoa.application;

import ch.cyberduck.ui.cocoa.foundation.NSArray;
import ch.cyberduck.ui.cocoa.foundation.NSString;

import org.rococoa.ObjCClass;
import org.rococoa.cocoa.foundation.NSInteger;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a>, <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public abstract class NSPrintPanel extends org.rococoa.cocoa.foundation.NSObject implements org.rococoa.ObjCObject {
    private static _Class CLASS = org.rococoa.Rococoa.createClass("NSPrintPanel", _Class.class);


    /// Whether the print panel has separate controls (not in any accessory view) that allow the user to change the number of copies to print, which pages to print, paper size, orientation, and scaling, respectively.
    public static final int NSPrintPanelShowsCopies = 1 << 0;
    public static final int NSPrintPanelShowsPageRange = 1 << 1;
    public static final int NSPrintPanelShowsPaperSize = 1 << 2;
    public static final int NSPrintPanelShowsOrientation = 1 << 3;
    public static final int NSPrintPanelShowsScaling = 1 << 4;
    /// Whether the print panel has an additional "Selection" option for the paper range.
    public static final int NSPrintPanelShowsPrintSelection = 1 << 5;
    /// Whether the print panel has a page setup accessory view with controls that allow the user to change paper size, orientation, and scaling. Any control that appear in the main part of the panel because one of the previous options is used does not also appear in the page setup accessory view.
    public static final int NSPrintPanelShowsPageSetupAccessory = 1 << 8;
    /**
     * Whether the print panel has a built-in preview. Setting this option in a print panel that's not being presented by an NSPrintOperation is not useful. Two things you need to be aware of when this option is set:<br>
     * 1) the NSPrintInfo passed into -beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo: or -runModalWithPrintInfo: will be retained instead of copied. This is so that the NSPrintOperation that is presenting the panel can respond to -printInfo messages by returning the NSPrintInfo that the user is actually looking at and manipulating, which is the most useful thing for it to return. The result is that the passed-in NSPrintInfo can be mutated even when the user cancels the print panel, but that's OK; the factory methods that you use to create NSPrintOperations do the copying that's appropriate in that case.<br>
     * 2) The presenting NSPrintOperation will send the printing view more messages that it would otherwise, so that it can do pagination right away, draw the preview on screen, etc.
     */
    public static final int NSPrintPanelShowsPreview = 1 << 17;

    /**
     * Create a new NSPrintPanel.<br>
     * Original signature : <code>+(NSPrintPanel*)printPanel</code><br>
     * <i>native declaration : NSPrintPanel.h:102</i>
     */
    public static NSPrintPanel printPanel() {
        return CLASS.printPanel();
    }

    public static interface _Class extends ObjCClass {
        /**
         * Create a new NSPrintPanel.<br>
         * Original signature : <code>+(NSPrintPanel*)printPanel</code><br>
         * <i>native declaration : NSPrintPanel.h:102</i>
         */
        public abstract NSPrintPanel printPanel();
        /// <i>native declaration : NSPrintPanel.h</i>

        public abstract NSPrintPanel alloc();
        /// <i>native declaration : NSPrintPanel.h</i>

        public abstract NSPrintPanel new_();
    }

    /**
     * Original signature : <code>-(NSArray*)accessoryControllers</code><br>
     * <i>native declaration : NSPrintPanel.h:110</i>
     */
    public abstract NSArray accessoryControllers();

    /**
     * The options described above. In Mac OS 10.5 an -options message sent to a freshly-created NSPrintPanel will return (NSPrintPanelShowsCopies | NSPrintPanelShowsPageRange) unless it was created by an NSPrintOperation, in which case it will also return NSPrintPanelShowsPreview. (See the release notes for backward binary compatibility information though.) To allow your application to take advantage of controls that may be added by default in future versions of Mac OS X, get the options from the print panel you've just created, turn on and off the flags you care about, and then set the options.<br>
     * Original signature : <code>-(void)setOptions:(NSPrintPanelOptions)</code><br>
     * <i>native declaration : NSPrintPanel.h:114</i><br>
     *
     * @param options @see AppKitLibrary#NSPrintPanelOptions
     */
    public abstract void setOptions(int options);

    /**
     * Original signature : <code>-(NSPrintPanelOptions)options</code><br>
     * <i>native declaration : NSPrintPanel.h:115</i>
     */
    public abstract int options();

    /**
     * The title of the default button in the print panel. You can override the standard button title, "Print," when you're using an NSPrintPanel in such a way that printing isn't actually going to happen when the user presses that button.<br>
     * Original signature : <code>-(void)setDefaultButtonTitle:(NSString*)</code><br>
     * <i>native declaration : NSPrintPanel.h:119</i>
     */
    public abstract void setDefaultButtonTitle(NSString defaultButtonTitle);

    /**
     * Original signature : <code>-(NSString*)defaultButtonTitle</code><br>
     * <i>native declaration : NSPrintPanel.h:120</i>
     */
    public abstract NSString defaultButtonTitle();

    /**
     * The HTML help anchor for the print panel. You can override the standard anchor of the print panel's help button.<br>
     * Original signature : <code>-(void)setHelpAnchor:(NSString*)</code><br>
     * <i>native declaration : NSPrintPanel.h:124</i>
     */
    public abstract void setHelpAnchor(NSString helpAnchor);

    /**
     * Original signature : <code>-(NSString*)helpAnchor</code><br>
     * <i>native declaration : NSPrintPanel.h:125</i>
     */
    public abstract NSString helpAnchor();

    /**
     * Set or get a string that provides a hint about the type of print job in which this print panel is being used. This controls the set of items that appear in the Presets menu. The string must be one of the job style hint strings declared above, or nil to show general presets.<br>
     * Original signature : <code>-(void)setJobStyleHint:(NSString*)</code><br>
     * <i>native declaration : NSPrintPanel.h:132</i>
     */
    public abstract void setJobStyleHint(NSString hint);

    /**
     * Original signature : <code>-(NSString*)jobStyleHint</code><br>
     * <i>native declaration : NSPrintPanel.h:133</i>
     */
    public abstract NSString jobStyleHint();

    /**
     * Present a print panel to the user, document-modally. When the user has dismissed it, send the message selected by didEndSelector to the delegate, with the contextInfo as the last argument. The method selected by didEndSelector must have the same signature as:<br>
     * - (void)printPanelDidEnd:(NSPrintPanel *)printPanel returnCode:(NSInteger)returnCode contextInfo:(void *)contextInfo;<br>
     * Original signature : <code>-(void)beginSheetWithPrintInfo:(NSPrintInfo*) modalForWindow:(NSWindow*) delegate:(id) didEndSelector:(SEL) contextInfo:(void*)</code><br>
     * <i>native declaration : NSPrintPanel.h:141</i>
     */
    public abstract void beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(NSPrintInfo printInfo, NSWindow docWindow, org.rococoa.ObjCObject delegate, org.rococoa.Selector didEndSelector, com.sun.jna.Pointer contextInfo);

    /**
     * Original signature : <code>-(NSInteger)runModalWithPrintInfo:(NSPrintInfo*)</code><br>
     * <i>native declaration : NSPrintPanel.h:146</i>
     */
    public abstract NSInteger runModalWithPrintInfo(NSPrintInfo printInfo);

    /**
     * Original signature : <code>-(NSInteger)runModal</code><br>
     * <i>native declaration : NSPrintPanel.h:148</i>
     */
    public abstract NSInteger runModal();

    /**
     * A simple accessor. Your -beginSheetWithPrintInfo:... delegate can use this so it doesn't have to keep a pointer to the NSPrintInfo elsewhere while waiting for the user to dismiss the print panel.<br>
     * Original signature : <code>-(NSPrintInfo*)printInfo</code><br>
     * <i>native declaration : NSPrintPanel.h:154</i>
     */
    public abstract NSPrintInfo printInfo();
}
